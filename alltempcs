export default {
  async fetch(request, env, ctx) {
    if (request.method === 'POST') {
      try {
        const formData = await request.formData();
        const model = formData.get('model');
        const message = formData.get('message');
        
        if (!model || !message) {
          return new Response(JSON.stringify({ 
            error: '请提供模型和消息' 
          }), {
            headers: { "Content-Type": "application/json" }
          });
        }
        
        // 使用AI模型处理请求
        try {
          // 检查是否为LlamaGuard模型
          let aiRequest;
          if (model.includes('llama-guard')) {
            aiRequest = {
              input: message,
              task_type: "classification"
            };
          } else {
            aiRequest = {
              messages: [{ role: "user", content: message }]
            };
          }
          
          // 尝试运行AI模型并捕获详细错误
          try {
            const result = await env.AI.run(model, aiRequest);
            return new Response(JSON.stringify(result), {
              headers: { "Content-Type": "application/json" }
            });
          } catch (aiError) {
            console.error('AI处理错误:', aiError);
            return new Response(JSON.stringify({ 
              error: '模型处理错误', 
              details: aiError.message || '未知错误',
              model: model
            }), {
              headers: { "Content-Type": "application/json" },
              status: 500
            });
          }
        } catch (error) {
          return new Response(JSON.stringify({ 
            error: '处理请求时出错', 
            details: error.message 
          }), {
            headers: { "Content-Type": "application/json" },
            status: 500
          });
        }
      } catch (error) {
        return new Response(JSON.stringify({ 
          error: '处理请求时出错', 
          details: error.message 
        }), {
          headers: { "Content-Type": "application/json" },
          status: 500
        });
      }
    }
    
    // 返回更完整的聊天界面
    return new Response(`<!DOCTYPE html>
<html lang="zh">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Cloudflare AI 聊天助手</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      max-width: 1000px;
      margin: 0 auto;
      padding: 20px;
      background-color: #f5f5f5;
    }
    
    .container {
      background-color: white;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      overflow: hidden;
      display: flex;
      flex-direction: column;
      height: 80vh;
    }
    
    h1 {
      text-align: center;
      color: #333;
    }
    
    .models {
      padding: 10px;
      background-color: #f0f0f0;
      border-bottom: 1px solid #ddd;
      max-height: 200px;
      overflow-y: auto;
    }
    
    .model-category {
      font-weight: bold;
      margin-top: 10px;
      margin-bottom: 5px;
      border-bottom: 1px solid #ddd;
      padding-bottom: 3px;
    }
    
    .model-card {
      display: inline-block;
      margin: 5px;
      padding: 6px 12px;
      border: 2px solid #ddd;
      border-radius: 20px;
      cursor: pointer;
      background-color: white;
      font-size: 0.9em;
    }
    
    .model-card.selected {
      border-color: #4a90e2;
      background-color: #e6f0ff;
    }
    
    .chat-area {
      flex: 1;
      overflow-y: auto;
      padding: 15px;
    }
    
    .message {
      margin-bottom: 15px;
      padding: 10px;
      border-radius: 8px;
      max-width: 70%;
      word-wrap: break-word;
    }
    
    .user-message {
      background-color: #e6f0ff;
      margin-left: auto;
      border-bottom-right-radius: 0;
    }
    
    .ai-message {
      background-color: #f0f0f0;
      margin-right: auto;
      border-bottom-left-radius: 0;
    }
    
    .input-area {
      display: flex;
      padding: 10px;
      border-top: 1px solid #ddd;
      background-color: white;
    }
    
    textarea {
      flex: 1;
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 4px;
      resize: none;
      height: 60px;
    }
    
    button {
      padding: 0 20px;
      margin-left: 10px;
      background-color: #4a90e2;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
    
    button:hover {
      background-color: #3a80d2;
    }
    
    .error {
      color: red;
      padding: 10px;
      background-color: #ffeeee;
      border-radius: 4px;
      margin: 10px 0;
    }
    
    .loading {
      color: #666;
      font-style: italic;
      text-align: center;
      padding: 10px;
    }
    
    .model-search {
      width: 100%;
      padding: 8px;
      margin-bottom: 10px;
      border-radius: 4px;
      border: 1px solid #ddd;
    }
    
    .model-provider {
      font-size: 0.8em;
      opacity: 0.7;
    }
    
    .beta-tag {
      font-size: 0.7em;
      background-color: #e67e22;
      color: white;
      padding: 1px 4px;
      border-radius: 3px;
      margin-left: 3px;
      vertical-align: middle;
    }
  </style>
</head>
<body>
  <h1>Cloudflare AI 聊天助手</h1>
  
  <div class="container">
    <div class="models">
      <input type="text" class="model-search" id="model-search" placeholder="搜索模型...">
      
      <div class="model-category">Meta 模型</div>
      <div class="model-card selected" data-model="@cf/meta/llama-3.3-70b-instruct-fp8-fast">Llama 3.3 70B Fast <span class="model-provider">• Meta</span></div>
      <div class="model-card" data-model="@cf/meta/llama-3.1-8b-instruct-fast">Llama 3.1 8B Fast <span class="model-provider">• Meta</span></div>
      <div class="model-card" data-model="@cf/meta/llama-3.1-8b-instruct">Llama 3.1 8B <span class="model-provider">• Meta</span></div>
      <div class="model-card" data-model="@cf/meta/llama-3.1-70b-instruct">Llama 3.1 70B <span class="model-provider">• Meta</span></div>
      <div class="model-card" data-model="@cf/meta/llama-3-8b-instruct">Llama 3 8B <span class="model-provider">• Meta</span></div>
      <div class="model-card" data-model="@cf/meta/llama-3.2-11b-vision-instruct">Llama 3.2 11B Vision <span class="model-provider">• Meta</span></div>
      <div class="model-card" data-model="@cf/meta/llama-3.2-3b-instruct">Llama 3.2 3B <span class="model-provider">• Meta</span></div>
      <div class="model-card" data-model="@cf/meta/llama-3.2-1b-instruct">Llama 3.2 1B <span class="model-provider">• Meta</span></div>
      <div class="model-card" data-model="@cf/meta/llama-guard-3-8b">Llama Guard 3 8B <span class="model-provider">• Meta</span></div>
      <div class="model-card" data-model="@cf/meta/llama-2-7b-chat-int8">Llama 2 7B Chat <span class="model-provider">• Meta</span></div>
      
      <div class="model-category">Mistral 模型</div>
      <div class="model-card" data-model="@cf/mistralai/mistral-7b-instruct-v0.1">Mistral 7B v0.1 <span class="model-provider">• MistralAI</span></div>
      <div class="model-card" data-model="@cf/mistralai/mistral-7b-instruct-v0.2">Mistral 7B v0.2 <span class="model-provider">• MistralAI</span></div>
      
      <div class="model-category">Google 模型</div>
      <div class="model-card" data-model="@cf/google/gemma-7b-it">Gemma 7B <span class="model-provider">• Google</span></div>
      <div class="model-card" data-model="@cf/microsoft/phi-2">Phi-2 <span class="model-provider">• Microsoft</span></div>
      
      <div class="model-category">Qwen 模型</div>
      <div class="model-card" data-model="@cf/qwen/qwen1.5-0.5b-chat">Qwen1.5 0.5B <span class="model-provider">• Qwen</span></div>
      <div class="model-card" data-model="@cf/qwen/qwen1.5-1.8b-chat">Qwen1.5 1.8B <span class="model-provider">• Qwen</span></div>
      <div class="model-card" data-model="@cf/qwen/qwen1.5-7b-chat-awq">Qwen1.5 7B <span class="model-provider">• Qwen</span></div>
      <div class="model-card" data-model="@cf/qwen/qwen1.5-14b-chat-awq">Qwen1.5 14B <span class="model-provider">• Qwen</span></div>
      
      <div class="model-category">DeepSeek 模型</div>
      <div class="model-card" data-model="@cf/deepseek/deepseek-coder-6.7b-instruct-awq">DeepSeek Coder 6.7B Instruct <span class="model-provider">• DeepSeek</span></div>
      <div class="model-card" data-model="@cf/deepseek/deepseek-math-7b-instruct">DeepSeek Math 7B <span class="model-provider">• DeepSeek</span></div>
      <div class="model-card" data-model="@cf/deepseek/deepseek-coder-6.7b-base-awq"><span class="beta-tag">Beta</span> DeepSeek Coder 6.7B Base <span class="model-provider">• thebloke</span></div>
      <div class="model-card" data-model="@cf/deepseek/deepseek-r1-distill-qwen-32b">DeepSeek R1 Distill Qwen 32B <span class="model-provider">• DeepSeek</span></div>
      
      <div class="model-category">其他模型</div>
      <div class="model-card" data-model="@cf/openchat/openchat-3.5-0106">OpenChat 3.5 <span class="model-provider">• OpenChat</span></div>
    </div>
    
    <div class="chat-area" id="chat-area"></div>
    
    <div class="input-area">
      <textarea id="message-input" placeholder="输入您的问题或对话..."></textarea>
      <button id="send-button">发送</button>
    </div>
  </div>

  <script>
    // 全局变量
    let selectedModel = "@cf/meta/llama-3.3-70b-instruct-fp8-fast";
    
    // 选择模型
    document.querySelectorAll('.model-card').forEach(card => {
      card.addEventListener('click', function() {
        document.querySelectorAll('.model-card').forEach(c => c.classList.remove('selected'));
        this.classList.add('selected');
        selectedModel = this.getAttribute('data-model');
      });
    });
    
    // 模型搜索功能
    document.getElementById('model-search').addEventListener('input', function() {
      const searchTerm = this.value.toLowerCase();
      
      document.querySelectorAll('.model-card').forEach(card => {
        const cardText = card.textContent.toLowerCase();
        if (cardText.includes(searchTerm)) {
          card.style.display = 'inline-block';
        } else {
          card.style.display = 'none';
        }
      });
      
      // 显示/隐藏类别标题
      document.querySelectorAll('.model-category').forEach(category => {
        const nextSibling = category.nextElementSibling;
        let hasVisibleCard = false;
        
        let current = nextSibling;
        while (current && !current.classList.contains('model-category')) {
          if (current.classList.contains('model-card') && current.style.display !== 'none') {
            hasVisibleCard = true;
            break;
          }
          current = current.nextElementSibling;
        }
        
        category.style.display = hasVisibleCard ? 'block' : 'none';
      });
    });
    
    // 聊天功能
    const chatArea = document.getElementById('chat-area');
    const messageInput = document.getElementById('message-input');
    const sendButton = document.getElementById('send-button');
    
    async function sendMessage() {
      const message = messageInput.value.trim();
      if (!message) return;
      
      // 添加用户消息到聊天区域
      const userDiv = document.createElement('div');
      userDiv.className = 'message user-message';
      userDiv.textContent = message;
      chatArea.appendChild(userDiv);
      
      // 清空输入框
      messageInput.value = '';
      
      // 滚动到底部
      chatArea.scrollTop = chatArea.scrollHeight;
      
      // 显示加载中
      const loadingDiv = document.createElement('div');
      loadingDiv.className = 'loading';
      loadingDiv.textContent = 'AI 思考中...';
      chatArea.appendChild(loadingDiv);
      
      // 准备表单数据
      const formData = new FormData();
      formData.append('model', selectedModel);
      formData.append('message', message);
      
      try {
        // 发送请求
        const response = await fetch('/', {
          method: 'POST',
          body: formData
        });
        
        // 移除加载指示器
        chatArea.removeChild(loadingDiv);
        
        if (!response.ok) {
          throw new Error('网络响应错误 (HTTP ' + response.status + ')');
        }
        
        const result = await response.json();
        
        // 处理不同模型的响应格式
        let aiResponseText = '';
        
        if (result.error) {
          throw new Error(result.error + (result.details ? ': ' + result.details : '') + (result.model ? ' [模型: ' + result.model + ']' : ''));
        }
        
        if (result.response) {
          aiResponseText = result.response;
        } else if (result.generation) {
          aiResponseText = result.generation;
        } else if (result.result) {
          aiResponseText = result.result;
        } else if (Array.isArray(result)) {
          aiResponseText = result[0]?.content || result[0]?.text || JSON.stringify(result);
        } else if (typeof result === 'string') {
          aiResponseText = result;
        } else if (result.content) {
          aiResponseText = result.content;
        } else {
          aiResponseText = JSON.stringify(result);
        }
        
        // 添加AI响应到聊天区域
        const aiDiv = document.createElement('div');
        aiDiv.className = 'message ai-message';
        aiDiv.textContent = aiResponseText;
        chatArea.appendChild(aiDiv);
        
      } catch (error) {
        // 显示错误
        const errorDiv = document.createElement('div');
        errorDiv.className = 'error';
        errorDiv.textContent = '错误: ' + error.message;
        chatArea.appendChild(errorDiv);
      }
      
      // 滚动到底部
      chatArea.scrollTop = chatArea.scrollHeight;
    }
    
    // 绑定发送按钮事件
    sendButton.addEventListener('click', sendMessage);
    
    // 绑定按键事件
    messageInput.addEventListener('keydown', function(e) {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        sendMessage();
      }
    });
  </script>
</body>
</html>`, {
      headers: { "Content-Type": "text/html;charset=UTF-8" }
    });
  }
};
