export default {
  async fetch(request, env, ctx) {
    const { pathname } = new URL(request.url);
    console.log(`收到请求: 方法=${request.method}, 路径=${pathname}`);

    // 如果请求路径为 /api/chat，则统一返回 JSON 格式响应
    if (pathname === '/api/chat') {
      if (request.method !== 'POST') {
        return new Response(JSON.stringify({ 
          error: '仅支持 POST 请求'
        }), {
          status: 405,
          headers: { "Content-Type": "application/json" }
        });
      }
      console.log('进入 /api/chat POST 处理');
      let formData;
      try {
        formData = await request.formData();
        const model = formData.get('model');
        const message = formData.get('message');

        console.log(`模型: ${model}, 消息: ${message}`);

        if (!model || !message) {
          return new Response(JSON.stringify({ 
            error: '请提供模型和消息' 
          }), {
            status: 400,
            headers: { "Content-Type": "application/json" }
          });
        }

        if (!env.AI) {
          return new Response(JSON.stringify({ 
            error: 'AI 服务未配置' 
          }), {
            status: 500,
            headers: { "Content-Type": "application/json" }
          });
        }

        const aiRequest = {
          messages: [{ role: "user", content: message }]
        };

        console.log('调用 AI 模型...');
        const result = await env.AI.run(model, aiRequest);
        console.log('AI 模型响应:', result);

        return new Response(JSON.stringify({
          response: result.response || result.text || result.content || JSON.stringify(result)
        }), {
          headers: { "Content-Type": "application/json" }
        });

      } catch (error) {
        console.error('请求处理错误:', error);
        return new Response(JSON.stringify({ 
          error: '处理请求时出错', 
          details: error.message || '未知错误',
          model: typeof formData !== 'undefined' ? (formData.get('model') || '未知模型') : '未知模型'
        }), {
          status: 500,
          headers: { "Content-Type": "application/json" }
        });
      }
    }

    // 非 /api/chat 路径返回 HTML 界面
    console.log('返回 HTML 界面');
    return new Response(`<!DOCTYPE html>
<html lang="zh">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Cloudflare AI 聊天助手</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      max-width: 1000px;
      margin: 0 auto;
      padding: 20px;
      background-color: #f5f5f5;
    }
    .container {
      background-color: white;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      overflow: hidden;
      display: flex;
      flex-direction: column;
      height: 80vh;
    }
    h1 {
      text-align: center;
      color: #333;
    }
    .models {
      padding: 10px;
      background-color: #f0f0f0;
      border-bottom: 1px solid #ddd;
    }
    .model-card {
      display: inline-block;
      margin: 5px;
      padding: 6px 12px;
      border: 2px solid #ddd;
      border-radius: 20px;
      cursor: pointer;
      background-color: white;
    }
    .model-card.selected {
      border-color: #4a90e2;
      background-color: #e6f0ff;
    }
    .chat-area {
      flex: 1;
      overflow-y: auto;
      padding: 15px;
    }
    .message {
      margin-bottom: 15px;
      padding: 10px;
      border-radius: 8px;
      max-width: 70%;
      word-wrap: break-word;
    }
    .user-message {
      background-color: #e6f0ff;
      margin-left: auto;
      border-bottom-right-radius: 0;
    }
    .ai-message {
      background-color: #f0f0f0;
      margin-right: auto;
      border-bottom-left-radius: 0;
    }
    .input-area {
      display: flex;
      padding: 10px;
      border-top: 1px solid #ddd;
      background-color: white;
    }
    textarea {
      flex: 1;
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 4px;
      resize: none;
      height: 60px;
    }
    button {
      padding: 0 20px;
      margin-left: 10px;
      background-color: #4a90e2;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
    button:hover {
      background-color: #3a80d2;
    }
    .error {
      color: red;
      padding: 10px;
      background-color: #ffeeee;
      border-radius: 4px;
      margin: 10px 0;
    }
    .loading {
      color: #666;
      font-style: italic;
      text-align: center;
      padding: 10px;
    }
  </style>
</head>
<body>
  <h1>Cloudflare AI 聊天助手</h1>
  <div class="container">
    <div class="models">
      <div class="model-card selected" data-model="@cf/deepseek-ai/deepseek-coder-6.7b-base-awq">DeepSeek Coder 6.7B Base AWQ</div>
      <div class="model-card" data-model="@cf/deepseek-ai/deepseek-coder-6.7b-instruct-awq">DeepSeek Coder 6.7B Instruct AWQ</div>
      <div class="model-card" data-model="@cf/deepseek-ai/deepseek-math-7b-instruct">DeepSeek Math 7B Instruct</div>
      <div class="model-card" data-model="@cf/deepseek-ai/deepseek-r1-distill-qwen-32b">DeepSeek R1 Qwen 32B</div>
    </div>
    <div class="chat-area" id="chat-area"></div>
    <div class="input-area">
      <textarea id="message-input" placeholder="输入您的问题或对话..."></textarea>
      <button id="send-button">发送</button>
    </div>
  </div>

  <script>
    let selectedModel = "@cf/deepseek-ai/deepseek-coder-6.7b-base-awq";
    
    document.querySelectorAll('.model-card').forEach(card => {
      card.addEventListener('click', function() {
        document.querySelectorAll('.model-card').forEach(c => c.classList.remove('selected'));
        this.classList.add('selected');
        selectedModel = this.getAttribute('data-model');
      });
    });

    const chatArea = document.getElementById('chat-area');
    const messageInput = document.getElementById('message-input');
    const sendButton = document.getElementById('send-button');

    async function sendMessage() {
      const message = messageInput.value.trim();
      if (!message) return;

      const userDiv = document.createElement('div');
      userDiv.className = 'message user-message';
      userDiv.textContent = message;
      chatArea.appendChild(userDiv);

      messageInput.value = '';
      chatArea.scrollTop = chatArea.scrollHeight;

      const loadingDiv = document.createElement('div');
      loadingDiv.className = 'loading';
      loadingDiv.textContent = 'AI 思考中...';
      chatArea.appendChild(loadingDiv);

      const formData = new FormData();
      formData.append('model', selectedModel);
      formData.append('message', message);

      try {
        const response = await fetch('/api/chat', {
          method: 'POST',
          body: formData
        });

        // 检查响应类型，确保返回 JSON 格式
        const contentType = response.headers.get("Content-Type");
        if (!contentType || !contentType.includes("application/json")) {
          const text = await response.text();
          throw new Error("服务器返回非 JSON 格式响应: " + text);
        }

        const result = await response.json();

        chatArea.removeChild(loadingDiv);

        if (!result.response) {
          throw new Error('响应格式错误: ' + JSON.stringify(result));
        }

        const aiDiv = document.createElement('div');
        aiDiv.className = 'message ai-message';
        aiDiv.textContent = result.response;
        chatArea.appendChild(aiDiv);

      } catch (error) {
        if (chatArea.contains(loadingDiv)) {
          chatArea.removeChild(loadingDiv);
        }
        const errorDiv = document.createElement('div');
        errorDiv.className = 'error';
        errorDiv.textContent = '错误: ' + error.message;
        chatArea.appendChild(errorDiv);
      }

      chatArea.scrollTop = chatArea.scrollHeight;
    }

    sendButton.addEventListener('click', sendMessage);
    messageInput.addEventListener('keydown', function(e) {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        sendMessage();
      }
    });
  </script>
</body>
</html>`, {
      headers: { "Content-Type": "text/html;charset=UTF-8" }
    });
  }
};
